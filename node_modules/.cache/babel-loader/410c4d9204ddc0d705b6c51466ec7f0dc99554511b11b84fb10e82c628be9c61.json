{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n// TODO: tbh, convert this to js and remove coffeescript as a dependency ;p\nimport TaskList from \"task_list\";\ndocument.addEventListener(\"turbolinks:load\", function () {\n  var markdown_divs;\n  markdown_divs = document.querySelectorAll(\".js-task-list-container\");\n  var _iterator = _createForOfIteratorHelper(markdown_divs),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var mdiv = _step.value;\n      new TaskList(mdiv);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n});\n\n// this fn submits the tasklist form to update the entry\ndocument.addEventListener(\"tasklist:changed\", function (e) {\n  var list_elem = e.currentTarget.activeElement.parentElement;\n  list_elem.classList.add(\"animate-flicker\");\n  var form = e.target.closest(\"form\");\n\n  // task-list-field holds the raw markdown content\n  var task_list_field = form.querySelector(\".js-task-list-field\");\n  var form_data = new FormData(form);\n  if (!task_list_field.value) {\n    // there are two ways the task_list_field is set:\n    // either thru a hidden form + textarea or a hidden div\n    //\n    // if the task_list_field has .value, then it's a textarea within\n    // the form, and its contents will have been captured in the FormData,\n    // and we don't have to do anything.\n    //\n    // if the task_list_field does not have a .value, then it's because it's\n    // our hacky div solution, so we need to look up its textContent and\n    // manually insert the field into the form_data.\n    form_data.set(\"entry[body]\", task_list_field.textContent);\n  }\n  fetch(form.action, {\n    method: form.method,\n    body: form_data,\n    headers: {\n      \"Accept\": \"application/json\"\n    }\n  }).then(function (response) {\n    if (response.status == 200) {\n      list_elem.classList.remove(\"animate-flicker\");\n    } else {\n      alert(\"yo, this checkbox failed to update, might want to refresh the page\");\n    }\n  });\n});","map":{"version":3,"names":["TaskList","document","addEventListener","markdown_divs","querySelectorAll","_iterator","_createForOfIteratorHelper","_step","s","n","done","mdiv","value","err","e","f","list_elem","currentTarget","activeElement","parentElement","classList","add","form","target","closest","task_list_field","querySelector","form_data","FormData","set","textContent","fetch","action","method","body","headers","then","response","status","remove","alert"],"sources":["/Users/phillmv/code/archive/app/javascript/task_list_handler.js"],"sourcesContent":["// TODO: tbh, convert this to js and remove coffeescript as a dependency ;p\nimport TaskList from \"task_list\";\n\n\ndocument.addEventListener(\"turbolinks:load\", function(){\n  var markdown_divs;\n  markdown_divs = document.querySelectorAll(\".js-task-list-container\");\n  for (let mdiv of markdown_divs) {\n    new TaskList(mdiv);\n  }\n});\n\n// this fn submits the tasklist form to update the entry\ndocument.addEventListener(\"tasklist:changed\", (e) => {\n  var list_elem = e.currentTarget.activeElement.parentElement\n  list_elem.classList.add(\"animate-flicker\")\n\n  var form = e.target.closest(\"form\")\n\n  // task-list-field holds the raw markdown content\n  var task_list_field = form.querySelector(\".js-task-list-field\")\n  var form_data = new FormData(form)\n  if (!task_list_field.value) {\n    // there are two ways the task_list_field is set:\n    // either thru a hidden form + textarea or a hidden div\n    //\n    // if the task_list_field has .value, then it's a textarea within\n    // the form, and its contents will have been captured in the FormData,\n    // and we don't have to do anything.\n    //\n    // if the task_list_field does not have a .value, then it's because it's\n    // our hacky div solution, so we need to look up its textContent and\n    // manually insert the field into the form_data.\n    form_data.set(\"entry[body]\", task_list_field.textContent)\n  }\n\n  fetch(form.action, {\n    method: form.method,\n    body: form_data,\n    headers: {\n      \"Accept\": \"application/json\"\n    }\n  }).then((response) => {\n    if(response.status == 200) {\n      list_elem.classList.remove(\"animate-flicker\")\n    }\n    else {\n      alert(\"yo, this checkbox failed to update, might want to refresh the page\")\n    }\n  });\n});\n\n"],"mappings":";;;AAAA;AACA,OAAOA,QAAQ,MAAM,WAAW;AAGhCC,QAAQ,CAACC,gBAAgB,CAAC,iBAAiB,EAAE,YAAU;EACrD,IAAIC,aAAa;EACjBA,aAAa,GAAGF,QAAQ,CAACG,gBAAgB,CAAC,yBAAyB,CAAC;EAAC,IAAAC,SAAA,GAAAC,0BAAA,CACpDH,aAAa;IAAAI,KAAA;EAAA;IAA9B,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAAgC;MAAA,IAAvBC,IAAI,GAAAJ,KAAA,CAAAK,KAAA;MACX,IAAIZ,QAAQ,CAACW,IAAI,CAAC;IACpB;EAAC,SAAAE,GAAA;IAAAR,SAAA,CAAAS,CAAA,CAAAD,GAAA;EAAA;IAAAR,SAAA,CAAAU,CAAA;EAAA;AACH,CAAC,CAAC;;AAEF;AACAd,QAAQ,CAACC,gBAAgB,CAAC,kBAAkB,EAAE,UAACY,CAAC,EAAK;EACnD,IAAIE,SAAS,GAAGF,CAAC,CAACG,aAAa,CAACC,aAAa,CAACC,aAAa;EAC3DH,SAAS,CAACI,SAAS,CAACC,GAAG,CAAC,iBAAiB,CAAC;EAE1C,IAAIC,IAAI,GAAGR,CAAC,CAACS,MAAM,CAACC,OAAO,CAAC,MAAM,CAAC;;EAEnC;EACA,IAAIC,eAAe,GAAGH,IAAI,CAACI,aAAa,CAAC,qBAAqB,CAAC;EAC/D,IAAIC,SAAS,GAAG,IAAIC,QAAQ,CAACN,IAAI,CAAC;EAClC,IAAI,CAACG,eAAe,CAACb,KAAK,EAAE;IAC1B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAe,SAAS,CAACE,GAAG,CAAC,aAAa,EAAEJ,eAAe,CAACK,WAAW,CAAC;EAC3D;EAEAC,KAAK,CAACT,IAAI,CAACU,MAAM,EAAE;IACjBC,MAAM,EAAEX,IAAI,CAACW,MAAM;IACnBC,IAAI,EAAEP,SAAS;IACfQ,OAAO,EAAE;MACP,QAAQ,EAAE;IACZ;EACF,CAAC,CAAC,CAACC,IAAI,CAAC,UAACC,QAAQ,EAAK;IACpB,IAAGA,QAAQ,CAACC,MAAM,IAAI,GAAG,EAAE;MACzBtB,SAAS,CAACI,SAAS,CAACmB,MAAM,CAAC,iBAAiB,CAAC;IAC/C,CAAC,MACI;MACHC,KAAK,CAAC,oEAAoE,CAAC;IAC7E;EACF,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}