{"ast":null,"code":"const ctrlBindings = !!navigator.userAgent.match(/Macintosh/);\nexport default class Combobox {\n  constructor(input, list) {\n    this.input = input;\n    this.list = list;\n    this.isComposing = false;\n    if (!list.id) {\n      list.id = `combobox-${Math.random().toString().slice(2, 6)}`;\n    }\n    this.keyboardEventHandler = event => keyboardBindings(event, this);\n    this.compositionEventHandler = event => trackComposition(event, this);\n    this.inputHandler = this.clearSelection.bind(this);\n    input.setAttribute('role', 'combobox');\n    input.setAttribute('aria-controls', list.id);\n    input.setAttribute('aria-expanded', 'false');\n    input.setAttribute('aria-autocomplete', 'list');\n    input.setAttribute('aria-haspopup', 'listbox');\n  }\n  destroy() {\n    this.clearSelection();\n    this.stop();\n    this.input.removeAttribute('role');\n    this.input.removeAttribute('aria-controls');\n    this.input.removeAttribute('aria-expanded');\n    this.input.removeAttribute('aria-autocomplete');\n    this.input.removeAttribute('aria-haspopup');\n  }\n  start() {\n    this.input.setAttribute('aria-expanded', 'true');\n    this.input.addEventListener('compositionstart', this.compositionEventHandler);\n    this.input.addEventListener('compositionend', this.compositionEventHandler);\n    this.input.addEventListener('input', this.inputHandler);\n    this.input.addEventListener('keydown', this.keyboardEventHandler);\n    this.list.addEventListener('click', commitWithElement);\n  }\n  stop() {\n    this.clearSelection();\n    this.input.setAttribute('aria-expanded', 'false');\n    this.input.removeEventListener('compositionstart', this.compositionEventHandler);\n    this.input.removeEventListener('compositionend', this.compositionEventHandler);\n    this.input.removeEventListener('input', this.inputHandler);\n    this.input.removeEventListener('keydown', this.keyboardEventHandler);\n    this.list.removeEventListener('click', commitWithElement);\n  }\n  navigate() {\n    let indexDiff = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    const focusEl = Array.from(this.list.querySelectorAll('[aria-selected=\"true\"]')).filter(visible)[0];\n    const els = Array.from(this.list.querySelectorAll('[role=\"option\"]')).filter(visible);\n    const focusIndex = els.indexOf(focusEl);\n    if (focusIndex === els.length - 1 && indexDiff === 1 || focusIndex === 0 && indexDiff === -1) {\n      this.clearSelection();\n      this.input.focus();\n      return;\n    }\n    let indexOfItem = indexDiff === 1 ? 0 : els.length - 1;\n    if (focusEl && focusIndex >= 0) {\n      const newIndex = focusIndex + indexDiff;\n      if (newIndex >= 0 && newIndex < els.length) indexOfItem = newIndex;\n    }\n    const target = els[indexOfItem];\n    if (!target) return;\n    for (const el of els) {\n      if (target === el) {\n        this.input.setAttribute('aria-activedescendant', target.id);\n        target.setAttribute('aria-selected', 'true');\n        scrollTo(this.list, target);\n      } else {\n        el.setAttribute('aria-selected', 'false');\n      }\n    }\n  }\n  clearSelection() {\n    this.input.removeAttribute('aria-activedescendant');\n    for (const el of this.list.querySelectorAll('[aria-selected=\"true\"]')) {\n      el.setAttribute('aria-selected', 'false');\n    }\n  }\n}\nfunction keyboardBindings(event, combobox) {\n  if (event.shiftKey || event.metaKey || event.altKey) return;\n  if (!ctrlBindings && event.ctrlKey) return;\n  if (combobox.isComposing) return;\n  switch (event.key) {\n    case 'Enter':\n    case 'Tab':\n      if (commit(combobox.input, combobox.list)) {\n        event.preventDefault();\n      }\n      break;\n    case 'Escape':\n      combobox.clearSelection();\n      break;\n    case 'ArrowDown':\n      combobox.navigate(1);\n      event.preventDefault();\n      break;\n    case 'ArrowUp':\n      combobox.navigate(-1);\n      event.preventDefault();\n      break;\n    case 'n':\n      if (ctrlBindings && event.ctrlKey) {\n        combobox.navigate(1);\n        event.preventDefault();\n      }\n      break;\n    case 'p':\n      if (ctrlBindings && event.ctrlKey) {\n        combobox.navigate(-1);\n        event.preventDefault();\n      }\n      break;\n    default:\n      if (event.ctrlKey) break;\n      combobox.clearSelection();\n  }\n}\nfunction commitWithElement(event) {\n  if (!(event.target instanceof Element)) return;\n  const target = event.target.closest('[role=\"option\"]');\n  if (!target) return;\n  if (target.getAttribute('aria-disabled') === 'true') return;\n  fireCommitEvent(target);\n}\nfunction commit(input, list) {\n  const target = list.querySelector('[aria-selected=\"true\"]');\n  if (!target) return false;\n  if (target.getAttribute('aria-disabled') === 'true') return true;\n  target.click();\n  return true;\n}\nfunction fireCommitEvent(target) {\n  target.dispatchEvent(new CustomEvent('combobox-commit', {\n    bubbles: true\n  }));\n}\nfunction visible(el) {\n  return !el.hidden && !(el instanceof HTMLInputElement && el.type === 'hidden') && (el.offsetWidth > 0 || el.offsetHeight > 0);\n}\nfunction trackComposition(event, combobox) {\n  combobox.isComposing = event.type === 'compositionstart';\n  const list = document.getElementById(combobox.input.getAttribute('aria-controls') || '');\n  if (!list) return;\n  combobox.clearSelection();\n}\nfunction scrollTo(container, target) {\n  if (!inViewport(container, target)) {\n    container.scrollTop = target.offsetTop;\n  }\n}\nfunction inViewport(container, element) {\n  const scrollTop = container.scrollTop;\n  const containerBottom = scrollTop + container.clientHeight;\n  const top = element.offsetTop;\n  const bottom = top + element.clientHeight;\n  return top >= scrollTop && bottom <= containerBottom;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}