{"ast":null,"code":"import { DirectUpload } from \"@rails/activestorage\";\n\n// handles directupload to form, injecting url back into textarea\nexport var uploadFile = function uploadFile(file, file_input) {\n  // your form needs the file_field direct_upload: true, which\n  // provides data-direct-upload-url\n  var url = file_input.dataset.directUploadUrl;\n  var upload = new DirectUpload(file, url);\n  upload.create(function (error, blob) {\n    if (error) {\n      alert(error);\n    } else {\n      var form = file_input.closest(\"form\");\n      var textarea = form.querySelector(\"textarea\");\n      var attachment_link;\n\n      // only set the img tag if it looks like an image!\n      if (blob.filename.match(/\\.(gif|jpe?g|tiff?|png|webp|bmp)$/)) {\n        attachment_link = \"![\".concat(blob.filename, \"](\").concat(blob.file_path, \")\");\n      } else {\n        attachment_link = \"[\".concat(blob.filename, \"](\").concat(blob.file_path, \")\");\n      }\n      textarea.setRangeText(attachment_link, textarea.selectionStart, textarea.selectionEnd, \"end\");\n\n      // Add an appropriately-named hidden input to the form with a\n      // value of blob.signed_id so that the blob ids will be\n      // transmitted in the normal upload flow\n      var hiddenField = document.createElement('input');\n      hiddenField.setAttribute(\"type\", \"hidden\");\n      hiddenField.setAttribute(\"value\", blob.signed_id);\n      hiddenField.name = file_input.name;\n      form.appendChild(hiddenField);\n    }\n  });\n};\ndocument.addEventListener(\"turbolinks:load\", function () {\n  var file_input, textarea;\n\n  // TODO: surely a SelectorAll and a for loop better eh?\n  file_input = document.querySelector('input[type=file]#entry_files');\n  textarea = document.querySelector('textarea#entry_body');\n\n  // handling uploads\n  // Bind to normal file selection\n  if (file_input) {\n    bind_input_change(file_input);\n\n    // bind to textarea paste events; we make it conditional on the\n    // file_input since we need its directUploadUrl\n    if (textarea) {\n      bind_textarea_paste(textarea, file_input);\n    }\n  }\n});\nfunction bind_input_change(file_input) {\n  file_input.addEventListener('change', function (event) {\n    Array.from(file_input.files).forEach(function (file) {\n      return uploadFile(file, file_input);\n    });\n    // you might clear the selected files from the input\n    file_input.value = null;\n  });\n}\nfunction bind_textarea_paste(textarea, file_input) {\n  textarea.addEventListener('paste', function (e) {\n    var clipboard_files = e.clipboardData.files;\n\n    // if there are no files, then we want to do the default\n    if (clipboard_files.length > 0) {\n      e.preventDefault();\n      Array.from(clipboard_files).forEach(function (file) {\n        return uploadFile(file, file_input);\n      });\n    }\n  });\n}","map":{"version":3,"names":["DirectUpload","uploadFile","file","file_input","url","dataset","directUploadUrl","upload","create","error","blob","alert","form","closest","textarea","querySelector","attachment_link","filename","match","concat","file_path","setRangeText","selectionStart","selectionEnd","hiddenField","document","createElement","setAttribute","signed_id","name","appendChild","addEventListener","bind_input_change","bind_textarea_paste","event","Array","from","files","forEach","value","e","clipboard_files","clipboardData","length","preventDefault"],"sources":["/Users/phillmv/code/archive/app/javascript/file_uploading.js"],"sourcesContent":["import { DirectUpload} from \"@rails/activestorage\";\n\n// handles directupload to form, injecting url back into textarea\nexport const uploadFile = (file, file_input) => {\n\n  // your form needs the file_field direct_upload: true, which\n  // provides data-direct-upload-url\n  const url = file_input.dataset.directUploadUrl\n  const upload = new DirectUpload(file, url)\n\n  upload.create((error, blob) => {\n    if (error) {\n      alert(error);\n\n    } else {\n\n      var form = file_input.closest(\"form\");\n      var textarea = form.querySelector(\"textarea\");\n      let attachment_link;\n\n      // only set the img tag if it looks like an image!\n      if (blob.filename.match(/\\.(gif|jpe?g|tiff?|png|webp|bmp)$/)) {\n        attachment_link = `![${blob.filename}](${blob.file_path})`\n      }\n      else {\n        attachment_link = `[${blob.filename}](${blob.file_path})`\n      }\n\n      textarea.setRangeText(attachment_link, textarea.selectionStart, textarea.selectionEnd, \"end\");\n\n      // Add an appropriately-named hidden input to the form with a\n      // value of blob.signed_id so that the blob ids will be\n      // transmitted in the normal upload flow\n      const hiddenField = document.createElement('input');\n      hiddenField.setAttribute(\"type\", \"hidden\");\n      hiddenField.setAttribute(\"value\", blob.signed_id);\n      hiddenField.name = file_input.name;\n      form.appendChild(hiddenField);\n    }\n  })\n}\n\ndocument.addEventListener(\"turbolinks:load\", function(){\n  var file_input, textarea;\n\n  // TODO: surely a SelectorAll and a for loop better eh?\n  file_input = document.querySelector('input[type=file]#entry_files');\n  textarea = document.querySelector('textarea#entry_body');\n\n  // handling uploads\n  // Bind to normal file selection\n  if(file_input) {\n\n    bind_input_change(file_input)\n\n    // bind to textarea paste events; we make it conditional on the\n    // file_input since we need its directUploadUrl\n    if (textarea) {\n      bind_textarea_paste(textarea, file_input)\n    }\n  }\n});\n\nfunction bind_input_change(file_input) {\n  file_input.addEventListener('change', (event) => {\n    Array.from(file_input.files).forEach(file => uploadFile(file, file_input))\n    // you might clear the selected files from the input\n    file_input.value = null\n  })\n}\n\nfunction bind_textarea_paste(textarea, file_input) {\n  textarea.addEventListener('paste', e => {\n    let clipboard_files = e.clipboardData.files\n\n    // if there are no files, then we want to do the default\n    if(clipboard_files.length > 0) {\n      e.preventDefault();\n\n      Array.from(clipboard_files).forEach(file => uploadFile(file, file_input))\n    }\n  });\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAO,sBAAsB;;AAElD;AACA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CAAIC,IAAI,EAAEC,UAAU,EAAK;EAE9C;EACA;EACA,IAAMC,GAAG,GAAGD,UAAU,CAACE,OAAO,CAACC,eAAe;EAC9C,IAAMC,MAAM,GAAG,IAAIP,YAAY,CAACE,IAAI,EAAEE,GAAG,CAAC;EAE1CG,MAAM,CAACC,MAAM,CAAC,UAACC,KAAK,EAAEC,IAAI,EAAK;IAC7B,IAAID,KAAK,EAAE;MACTE,KAAK,CAACF,KAAK,CAAC;IAEd,CAAC,MAAM;MAEL,IAAIG,IAAI,GAAGT,UAAU,CAACU,OAAO,CAAC,MAAM,CAAC;MACrC,IAAIC,QAAQ,GAAGF,IAAI,CAACG,aAAa,CAAC,UAAU,CAAC;MAC7C,IAAIC,eAAe;;MAEnB;MACA,IAAIN,IAAI,CAACO,QAAQ,CAACC,KAAK,CAAC,mCAAmC,CAAC,EAAE;QAC5DF,eAAe,QAAAG,MAAA,CAAQT,IAAI,CAACO,QAAQ,QAAAE,MAAA,CAAKT,IAAI,CAACU,SAAS,MAAG;MAC5D,CAAC,MACI;QACHJ,eAAe,OAAAG,MAAA,CAAOT,IAAI,CAACO,QAAQ,QAAAE,MAAA,CAAKT,IAAI,CAACU,SAAS,MAAG;MAC3D;MAEAN,QAAQ,CAACO,YAAY,CAACL,eAAe,EAAEF,QAAQ,CAACQ,cAAc,EAAER,QAAQ,CAACS,YAAY,EAAE,KAAK,CAAC;;MAE7F;MACA;MACA;MACA,IAAMC,WAAW,GAAGC,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;MACnDF,WAAW,CAACG,YAAY,CAAC,MAAM,EAAE,QAAQ,CAAC;MAC1CH,WAAW,CAACG,YAAY,CAAC,OAAO,EAAEjB,IAAI,CAACkB,SAAS,CAAC;MACjDJ,WAAW,CAACK,IAAI,GAAG1B,UAAU,CAAC0B,IAAI;MAClCjB,IAAI,CAACkB,WAAW,CAACN,WAAW,CAAC;IAC/B;EACF,CAAC,CAAC;AACJ,CAAC;AAEDC,QAAQ,CAACM,gBAAgB,CAAC,iBAAiB,EAAE,YAAU;EACrD,IAAI5B,UAAU,EAAEW,QAAQ;;EAExB;EACAX,UAAU,GAAGsB,QAAQ,CAACV,aAAa,CAAC,8BAA8B,CAAC;EACnED,QAAQ,GAAGW,QAAQ,CAACV,aAAa,CAAC,qBAAqB,CAAC;;EAExD;EACA;EACA,IAAGZ,UAAU,EAAE;IAEb6B,iBAAiB,CAAC7B,UAAU,CAAC;;IAE7B;IACA;IACA,IAAIW,QAAQ,EAAE;MACZmB,mBAAmB,CAACnB,QAAQ,EAAEX,UAAU,CAAC;IAC3C;EACF;AACF,CAAC,CAAC;AAEF,SAAS6B,iBAAiBA,CAAC7B,UAAU,EAAE;EACrCA,UAAU,CAAC4B,gBAAgB,CAAC,QAAQ,EAAE,UAACG,KAAK,EAAK;IAC/CC,KAAK,CAACC,IAAI,CAACjC,UAAU,CAACkC,KAAK,CAAC,CAACC,OAAO,CAAC,UAAApC,IAAI;MAAA,OAAID,UAAU,CAACC,IAAI,EAAEC,UAAU,CAAC;IAAA,EAAC;IAC1E;IACAA,UAAU,CAACoC,KAAK,GAAG,IAAI;EACzB,CAAC,CAAC;AACJ;AAEA,SAASN,mBAAmBA,CAACnB,QAAQ,EAAEX,UAAU,EAAE;EACjDW,QAAQ,CAACiB,gBAAgB,CAAC,OAAO,EAAE,UAAAS,CAAC,EAAI;IACtC,IAAIC,eAAe,GAAGD,CAAC,CAACE,aAAa,CAACL,KAAK;;IAE3C;IACA,IAAGI,eAAe,CAACE,MAAM,GAAG,CAAC,EAAE;MAC7BH,CAAC,CAACI,cAAc,CAAC,CAAC;MAElBT,KAAK,CAACC,IAAI,CAACK,eAAe,CAAC,CAACH,OAAO,CAAC,UAAApC,IAAI;QAAA,OAAID,UAAU,CAACC,IAAI,EAAEC,UAAU,CAAC;MAAA,EAAC;IAC3E;EACF,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}